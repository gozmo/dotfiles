execute pathogen#infect() 
let mapleader=" "

" Show a red column and linewidth 120
if exists('+colorcolumn') | set colorcolumn=120 | endif

" F-key mappings
nmap <silent> <F2> :NERDTreeToggle<CR>
nmap <F3> :TagbarToggle<CR>
nnoremap <F5> :UndotreeToggle<cr>

"Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" Search and replace the word under the cursor
nnoremap <leader>* :%s/\<<c-r><c-w>\>//g<left><left>

" Moving a line up or down
nnoremap <c-k> :m-2<cr>==
nnoremap <c-j> :m+<cr>==
xnoremap <c-k> :m-2<cr>gv=gv
xnoremap <c-j> :m'>+<cr>gv=gv

filetype plugin indent on
syntax on
set autoread
set background=dark
set encoding=utf-8
set hlsearch
set ignorecase
set noequalalways
set nowrap
set number
set showmatch
set t_Co=256
set textwidth=120
set ttyfast
set wrapmargin=0
setglobal fileencoding=utf-8

set wildignore=*.json,*.jpg,*.csv

"Tab settings
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4

colorscheme gruvbox

if has('gui_running')
  set guifont=Monospace
endif



""""""""""""""""""
" Plugin configs "
""""""""""""""""""

" Nerdtree config
let g:NERDTreeWinSize=31 "This doesn't work on some systems
let g:NERDTreeWinPos = "right"

"Airline config
set laststatus=2
let g:airline_powerline_fonts = 1

set wildignore+=*.png,*.jpg,*.jpeg,*/build/*,*.pyc,*.log,*/log/*,*/logs/*,*.log.*,*.class,*.json,*.txt

"Fugitive config
set diffopt+=vertical

"Undotree config
set undodir=~/.undodir/
set undofile

if !exists('g:undotree_WindowLayout')
    let g:undotree_WindowLayout = 4
endif

" undotree window width
if !exists('g:undotree_SplitWidth')
    if exists('g:undotree_ShortIndicators')
        let g:undotree_SplitWidth = 24
    else
        let g:undotree_SplitWidth = 30
    endif
endif

" diff window height
if !exists('g:undotree_DiffpanelHeight')
    let g:undotree_DiffpanelHeight = 10
endif

" if set, let undotree window get focus after being opened, otherwise
" focus will stay in current window.
if !exists('g:undotree_SetFocusWhenToggle')
    let g:undotree_SetFocusWhenToggle = 0
endif

" relative timestamp
if !exists('g:undotree_RelativeTimestamp')
    let g:undotree_RelativeTimestamp = 1
endif

" Highlight changed text
if !exists('g:undotree_HighlightChangedText')
    let g:undotree_HighlightChangedText = 1
endif


" If installed using git
set rtp+=~/.fzf

for n in range(1, 9)
  exe "nnoremap <silent> <M-".n."> :".n."wincmd w<CR>"
endfor

"FZF

autocmd VimEnter * noremap <Leader>f :FZF<cr>
autocmd VimEnter * noremap <Leader>g :Rg<cr>
autocmd VimEnter * noremap <Leader>b :Buffers<cr>
autocmd VimEnter * noremap <Leader>t :BTags<cr>
autocmd VimEnter * noremap <Leader>r :Tags<cr>
autocmd VimEnter * noremap <Leader>m :Marks<cr>
autocmd VimEnter * noremap <Leader>l :BLines<cr>
autocmd VimEnter * noremap <Leader>k :Lines<cr>

" Semantic highlight
autocmd VimEnter * noremap <Leader>h :SemanticHighlightToggle<cr>
let g:semanticTermColors = [100,136,31] 

"Goyo

autocmd VimEnter * noremap <Leader>z :Goyo<cr>
let g:goyo_width = 120


" Vimwiki
let g:vimwiki_list = [{'path': '~/Dropbox/vimwiki/'}]
let g:vimwiki_listsyms = '✗○◐●✓'

" Jedi vim
let g:jedi#goto_assignments_command = "<leader>jg"
